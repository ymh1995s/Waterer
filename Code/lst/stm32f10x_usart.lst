
C:\Users\Linux\Downloads\06_12\obj\stm32f10x_usart.o:     file format elf32-littlearm
C:\Users\Linux\Downloads\06_12\obj\stm32f10x_usart.o

Disassembly of section .text.USART_StructInit:

00000000 <USART_StructInit>:
USART_StructInit():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:284
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
   0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   4:	6003      	str	r3, [r0, #0]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:288
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   6:	f04f 020c 	mov.w	r2, #12	; 0xc
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:285
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
   a:	f5a3 5316 	sub.w	r3, r3, #9600	; 0x2580
   e:	8083      	strh	r3, [r0, #4]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:286
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  10:	80c3      	strh	r3, [r0, #6]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:287
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  12:	8103      	strh	r3, [r0, #8]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:288
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  14:	8142      	strh	r2, [r0, #10]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:289
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
  16:	8183      	strh	r3, [r0, #12]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:290
}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_ClockInit:

00000000 <USART_ClockInit>:
USART_ClockInit():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:324
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
   0:	884b      	ldrh	r3, [r1, #2]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:303
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
   2:	b510      	push	{r4, lr}
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:324
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
   4:	880c      	ldrh	r4, [r1, #0]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:313
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
   6:	8a02      	ldrh	r2, [r0, #16]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:324
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
   8:	4323      	orrs	r3, r4
   a:	888c      	ldrh	r4, [r1, #4]
   c:	88c9      	ldrh	r1, [r1, #6]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:315
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
   e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:324
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
  12:	4323      	orrs	r3, r4
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:315
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
  14:	0412      	lsls	r2, r2, #16
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:324
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
  16:	430b      	orrs	r3, r1
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:315
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
  18:	0c12      	lsrs	r2, r2, #16
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:324
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
  1a:	b29b      	uxth	r3, r3
  1c:	4313      	orrs	r3, r2
  1e:	8203      	strh	r3, [r0, #16]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:325
}
  20:	bd10      	pop	{r4, pc}
  22:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_ClockStructInit:

00000000 <USART_ClockStructInit>:
USART_ClockStructInit():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:336
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
   0:	2300      	movs	r3, #0
   2:	8003      	strh	r3, [r0, #0]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:337
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
   4:	8043      	strh	r3, [r0, #2]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:338
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
   6:	8083      	strh	r3, [r0, #4]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:339
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
   8:	80c3      	strh	r3, [r0, #6]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:340
}
   a:	4770      	bx	lr
Disassembly of section .text.USART_Cmd:

00000000 <USART_Cmd>:
USART_Cmd():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:357
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <USART_Cmd+0xc>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:360
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
   2:	8983      	ldrh	r3, [r0, #12]
   4:	b29b      	uxth	r3, r3
   6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   a:	e004      	b.n	16 <USART_Cmd+0x16>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:365
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
   c:	8983      	ldrh	r3, [r0, #12]
   e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8183      	strh	r3, [r0, #12]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:367
  }
}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_ITConfig:

00000000 <USART_ITConfig>:
USART_ITConfig():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:405
  }   
  
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
   0:	f3c1 1c42 	ubfx	ip, r1, #5, #3
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:409

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
   4:	2301      	movs	r3, #1
   6:	f001 011f 	and.w	r1, r1, #31	; 0x1f
   a:	fa13 f101 	lsls.w	r1, r3, r1
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:411
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
   e:	459c      	cmp	ip, r3
  10:	d101      	bne.n	16 <USART_ITConfig+0x16>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:413
  {
    usartxbase += 0x0C;
  12:	300c      	adds	r0, #12
  14:	e005      	b.n	22 <USART_ITConfig+0x22>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:415
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  16:	f1bc 0f02 	cmp.w	ip, #2	; 0x2
  1a:	d101      	bne.n	20 <USART_ITConfig+0x20>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:417
  {
    usartxbase += 0x10;
  1c:	3010      	adds	r0, #16
  1e:	e000      	b.n	22 <USART_ITConfig+0x22>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:421
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  20:	3014      	adds	r0, #20
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:423
  }
  if (NewState != DISABLE)
  22:	b112      	cbz	r2, 2a <USART_ITConfig+0x2a>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:425
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  24:	6803      	ldr	r3, [r0, #0]
  26:	430b      	orrs	r3, r1
  28:	e002      	b.n	30 <USART_ITConfig+0x30>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:429
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  2a:	6803      	ldr	r3, [r0, #0]
  2c:	ea23 0301 	bic.w	r3, r3, r1
  30:	6003      	str	r3, [r0, #0]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:431
  }
}
  32:	4770      	bx	lr
Disassembly of section .text.USART_DMACmd:

00000000 <USART_DMACmd>:
USART_DMACmd():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:454
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
   0:	b122      	cbz	r2, c <USART_DMACmd+0xc>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:458
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
   2:	8a83      	ldrh	r3, [r0, #20]
   4:	b29b      	uxth	r3, r3
   6:	ea41 0303 	orr.w	r3, r1, r3
   a:	e003      	b.n	14 <USART_DMACmd+0x14>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:464
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
   c:	8a83      	ldrh	r3, [r0, #20]
   e:	b29b      	uxth	r3, r3
  10:	ea23 0301 	bic.w	r3, r3, r1
  14:	8283      	strh	r3, [r0, #20]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:466
  }
}
  16:	4770      	bx	lr
Disassembly of section .text.USART_SetAddress:

00000000 <USART_SetAddress>:
USART_SetAddress():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:483
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
   0:	8a03      	ldrh	r3, [r0, #16]
   2:	f023 030f 	bic.w	r3, r3, #15	; 0xf
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8203      	strh	r3, [r0, #16]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:485
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
   c:	8a03      	ldrh	r3, [r0, #16]
   e:	b29b      	uxth	r3, r3
  10:	430b      	orrs	r3, r1
  12:	8203      	strh	r3, [r0, #16]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:486
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_WakeUpConfig:

00000000 <USART_WakeUpConfig>:
USART_WakeUpConfig():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:505
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
   0:	8983      	ldrh	r3, [r0, #12]
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8183      	strh	r3, [r0, #12]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:506
  USARTx->CR1 |= USART_WakeUp;
   c:	8983      	ldrh	r3, [r0, #12]
   e:	b29b      	uxth	r3, r3
  10:	4319      	orrs	r1, r3
  12:	8181      	strh	r1, [r0, #12]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:507
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_ReceiverWakeUpCmd:

00000000 <USART_ReceiverWakeUpCmd>:
USART_ReceiverWakeUpCmd():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:524
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <USART_ReceiverWakeUpCmd+0xc>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:527
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
   2:	8983      	ldrh	r3, [r0, #12]
   4:	b29b      	uxth	r3, r3
   6:	f043 0302 	orr.w	r3, r3, #2	; 0x2
   a:	e004      	b.n	16 <USART_ReceiverWakeUpCmd+0x16>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:532
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
   c:	8983      	ldrh	r3, [r0, #12]
   e:	f023 0302 	bic.w	r3, r3, #2	; 0x2
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8183      	strh	r3, [r0, #12]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:534
  }
}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_LINBreakDetectLengthConfig:

00000000 <USART_LINBreakDetectLengthConfig>:
USART_LINBreakDetectLengthConfig():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:553
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
   0:	8a03      	ldrh	r3, [r0, #16]
   2:	f023 0320 	bic.w	r3, r3, #32	; 0x20
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8203      	strh	r3, [r0, #16]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:554
  USARTx->CR2 |= USART_LINBreakDetectLength;  
   c:	8a03      	ldrh	r3, [r0, #16]
   e:	b29b      	uxth	r3, r3
  10:	4319      	orrs	r1, r3
  12:	8201      	strh	r1, [r0, #16]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:555
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_LINCmd:

00000000 <USART_LINCmd>:
USART_LINCmd():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:572
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <USART_LINCmd+0xc>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:575
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
   2:	8a03      	ldrh	r3, [r0, #16]
   4:	b29b      	uxth	r3, r3
   6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   a:	e004      	b.n	16 <USART_LINCmd+0x16>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:580
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
   c:	8a03      	ldrh	r3, [r0, #16]
   e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8203      	strh	r3, [r0, #16]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:582
  }
}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_SendData:

00000000 <USART_SendData>:
USART_SendData():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:599
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
   0:	05c9      	lsls	r1, r1, #23
   2:	0dc9      	lsrs	r1, r1, #23
   4:	8081      	strh	r1, [r0, #4]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:600
}
   6:	4770      	bx	lr
Disassembly of section .text.USART_ReceiveData:

00000000 <USART_ReceiveData>:
USART_ReceiveData():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:615
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
   0:	8880      	ldrh	r0, [r0, #4]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:616
}
   2:	05c0      	lsls	r0, r0, #23
   4:	0dc0      	lsrs	r0, r0, #23
   6:	4770      	bx	lr
Disassembly of section .text.USART_SendBreak:

00000000 <USART_SendBreak>:
USART_SendBreak():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:631
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
   0:	8983      	ldrh	r3, [r0, #12]
   2:	b29b      	uxth	r3, r3
   4:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   8:	8183      	strh	r3, [r0, #12]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:632
}
   a:	4770      	bx	lr
Disassembly of section .text.USART_SetGuardTime:

00000000 <USART_SetGuardTime>:
USART_SetGuardTime():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:647
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
   0:	8b03      	ldrh	r3, [r0, #24]
   2:	b2db      	uxtb	r3, r3
   4:	8303      	strh	r3, [r0, #24]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:649
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
   6:	8b03      	ldrh	r3, [r0, #24]
   8:	b29b      	uxth	r3, r3
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	8303      	strh	r3, [r0, #24]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:650
}
  10:	4770      	bx	lr
  12:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_SetPrescaler:

00000000 <USART_SetPrescaler>:
USART_SetPrescaler():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:667
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
   0:	8b03      	ldrh	r3, [r0, #24]
   2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   6:	8303      	strh	r3, [r0, #24]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:669
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
   8:	8b03      	ldrh	r3, [r0, #24]
   a:	b29b      	uxth	r3, r3
   c:	430b      	orrs	r3, r1
   e:	8303      	strh	r3, [r0, #24]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:670
}
  10:	4770      	bx	lr
  12:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_SmartCardCmd:

00000000 <USART_SmartCardCmd>:
USART_SmartCardCmd():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:685
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <USART_SmartCardCmd+0xc>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:688
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
   2:	8a83      	ldrh	r3, [r0, #20]
   4:	b29b      	uxth	r3, r3
   6:	f043 0320 	orr.w	r3, r3, #32	; 0x20
   a:	e004      	b.n	16 <USART_SmartCardCmd+0x16>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:693
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
   c:	8a83      	ldrh	r3, [r0, #20]
   e:	f023 0320 	bic.w	r3, r3, #32	; 0x20
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8283      	strh	r3, [r0, #20]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:695
  }
}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_SmartCardNACKCmd:

00000000 <USART_SmartCardNACKCmd>:
USART_SmartCardNACKCmd():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:710
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <USART_SmartCardNACKCmd+0xc>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:713
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
   2:	8a83      	ldrh	r3, [r0, #20]
   4:	b29b      	uxth	r3, r3
   6:	f043 0310 	orr.w	r3, r3, #16	; 0x10
   a:	e004      	b.n	16 <USART_SmartCardNACKCmd+0x16>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:718
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
   c:	8a83      	ldrh	r3, [r0, #20]
   e:	f023 0310 	bic.w	r3, r3, #16	; 0x10
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8283      	strh	r3, [r0, #20]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:720
  }
}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_HalfDuplexCmd:

00000000 <USART_HalfDuplexCmd>:
USART_HalfDuplexCmd():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:737
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <USART_HalfDuplexCmd+0xc>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:740
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
   2:	8a83      	ldrh	r3, [r0, #20]
   4:	b29b      	uxth	r3, r3
   6:	f043 0308 	orr.w	r3, r3, #8	; 0x8
   a:	e004      	b.n	16 <USART_HalfDuplexCmd+0x16>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:745
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
   c:	8a83      	ldrh	r3, [r0, #20]
   e:	f023 0308 	bic.w	r3, r3, #8	; 0x8
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8283      	strh	r3, [r0, #20]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:747
  }
}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_OverSampling8Cmd:

00000000 <USART_OverSampling8Cmd>:
USART_OverSampling8Cmd():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:768
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b131      	cbz	r1, 10 <USART_OverSampling8Cmd+0x10>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:771
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
   2:	8983      	ldrh	r3, [r0, #12]
   4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   c:	b29b      	uxth	r3, r3
   e:	e002      	b.n	16 <USART_OverSampling8Cmd+0x16>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:776
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
  10:	8983      	ldrh	r3, [r0, #12]
  12:	045b      	lsls	r3, r3, #17
  14:	0c5b      	lsrs	r3, r3, #17
  16:	8183      	strh	r3, [r0, #12]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:778
  }
}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_OneBitMethodCmd:

00000000 <USART_OneBitMethodCmd>:
USART_OneBitMethodCmd():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:795
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <USART_OneBitMethodCmd+0xc>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:798
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
   2:	8a83      	ldrh	r3, [r0, #20]
   4:	b29b      	uxth	r3, r3
   6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a:	e004      	b.n	16 <USART_OneBitMethodCmd+0x16>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:803
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
   c:	8a83      	ldrh	r3, [r0, #20]
   e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8283      	strh	r3, [r0, #20]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:805
  }
}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_IrDAConfig:

00000000 <USART_IrDAConfig>:
USART_IrDAConfig():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:824
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
   0:	8a83      	ldrh	r3, [r0, #20]
   2:	f023 0304 	bic.w	r3, r3, #4	; 0x4
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8283      	strh	r3, [r0, #20]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:825
  USARTx->CR3 |= USART_IrDAMode;
   c:	8a83      	ldrh	r3, [r0, #20]
   e:	b29b      	uxth	r3, r3
  10:	4319      	orrs	r1, r3
  12:	8281      	strh	r1, [r0, #20]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:826
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_IrDACmd:

00000000 <USART_IrDACmd>:
USART_IrDACmd():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:843
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <USART_IrDACmd+0xc>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:846
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
   2:	8a83      	ldrh	r3, [r0, #20]
   4:	b29b      	uxth	r3, r3
   6:	f043 0302 	orr.w	r3, r3, #2	; 0x2
   a:	e004      	b.n	16 <USART_IrDACmd+0x16>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:851
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
   c:	8a83      	ldrh	r3, [r0, #20]
   e:	f023 0302 	bic.w	r3, r3, #2	; 0x2
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8283      	strh	r3, [r0, #20]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:853
  }
}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_GetFlagStatus:

00000000 <USART_GetFlagStatus>:
USART_GetFlagStatus():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:886
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
   0:	8803      	ldrh	r3, [r0, #0]
   2:	4219      	tst	r1, r3
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:895
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
   4:	bf0c      	ite	eq
   6:	2000      	moveq	r0, #0
   8:	2001      	movne	r0, #1
   a:	4770      	bx	lr
Disassembly of section .text.USART_ClearFlag:

00000000 <USART_ClearFlag>:
USART_ClearFlag():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:934
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
   0:	43c9      	mvns	r1, r1
   2:	b289      	uxth	r1, r1
   4:	8001      	strh	r1, [r0, #0]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:935
}
   6:	4770      	bx	lr
Disassembly of section .text.USART_GetITStatus:

00000000 <USART_GetITStatus>:
USART_GetITStatus():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:973
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
   0:	2301      	movs	r3, #1
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:957
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
   2:	b510      	push	{r4, lr}
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:973
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
   4:	f001 021f 	and.w	r2, r1, #31	; 0x1f
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:957
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
   8:	4604      	mov	r4, r0
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:970
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
   a:	f3c1 1042 	ubfx	r0, r1, #5, #3
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:973
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
   e:	fa13 f202 	lsls.w	r2, r3, r2
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:975
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  12:	4298      	cmp	r0, r3
  14:	d101      	bne.n	1a <USART_GetITStatus+0x1a>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:977
  {
    itmask &= USARTx->CR1;
  16:	89a3      	ldrh	r3, [r4, #12]
  18:	e003      	b.n	22 <USART_GetITStatus+0x22>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:979
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
  1a:	2802      	cmp	r0, #2
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:981
  {
    itmask &= USARTx->CR2;
  1c:	bf0c      	ite	eq
  1e:	8a23      	ldrheq	r3, [r4, #16]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:985
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  20:	8aa3      	ldrhne	r3, [r4, #20]
  22:	b29b      	uxth	r3, r3
  24:	ea02 0003 	and.w	r0, r2, r3
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:990
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
  28:	8823      	ldrh	r3, [r4, #0]
  2a:	b29c      	uxth	r4, r3
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:991
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  2c:	b130      	cbz	r0, 3c <USART_GetITStatus+0x3c>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:989
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  2e:	0a0a      	lsrs	r2, r1, #8
  30:	2301      	movs	r3, #1
  32:	4093      	lsls	r3, r2
  34:	4223      	tst	r3, r4
  36:	bf0c      	ite	eq
  38:	2000      	moveq	r0, #0
  3a:	2001      	movne	r0, #1
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:1001
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
  3c:	bd10      	pop	{r4, pc}
  3e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_ClearITPendingBit:

00000000 <USART_ClearITPendingBit>:
USART_ClearITPendingBit():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:1044
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
  USARTx->SR = (uint16_t)~itmask;
   0:	0a09      	lsrs	r1, r1, #8
   2:	2301      	movs	r3, #1
   4:	408b      	lsls	r3, r1
   6:	43db      	mvns	r3, r3
   8:	b29b      	uxth	r3, r3
   a:	8003      	strh	r3, [r0, #0]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:1045
}
   c:	4770      	bx	lr
   e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_Init:

00000000 <USART_Init>:
USART_Init():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:200
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
   0:	8a03      	ldrh	r3, [r0, #16]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:208
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
   2:	88ca      	ldrh	r2, [r1, #6]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:202
  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
   4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:208
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
   c:	4313      	orrs	r3, r2
   e:	8203      	strh	r3, [r0, #16]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:211

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  10:	8982      	ldrh	r2, [r0, #12]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:221
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  12:	890b      	ldrh	r3, [r1, #8]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:177
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
  14:	b530      	push	{r4, r5, lr}
  16:	460d      	mov	r5, r1
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:221
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  18:	8889      	ldrh	r1, [r1, #4]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:213
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
  1a:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:221
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  1e:	430b      	orrs	r3, r1
  20:	8969      	ldrh	r1, [r5, #10]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:213
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
  22:	f022 020c 	bic.w	r2, r2, #12	; 0xc
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:221
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  26:	430b      	orrs	r3, r1
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:213
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
  28:	0412      	lsls	r2, r2, #16
  2a:	0c12      	lsrs	r2, r2, #16
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:221
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  2c:	b29b      	uxth	r3, r3
  2e:	4313      	orrs	r3, r2
  30:	8183      	strh	r3, [r0, #12]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:224

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
  32:	8a83      	ldrh	r3, [r0, #20]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:231
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
  34:	89aa      	ldrh	r2, [r5, #12]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:226
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  3a:	041b      	lsls	r3, r3, #16
  3c:	0c1b      	lsrs	r3, r3, #16
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:177
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
  3e:	b087      	sub	sp, #28
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:231
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
  40:	4313      	orrs	r3, r2
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:177
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
  42:	4604      	mov	r4, r0
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:231
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
  44:	8283      	strh	r3, [r0, #20]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:235

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  46:	a801      	add	r0, sp, #4
  48:	f7ff fffe 	bl	0 <RCC_GetClocksFreq>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:236
  if (usartxbase == USART1_BASE)
  4c:	4b18      	ldr	r3, [pc, #96]	(b0 <RCC_GetClocksFreq+0xb0>)
  4e:	6829      	ldr	r1, [r5, #0]
  50:	429c      	cmp	r4, r3
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:246
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
  52:	89a3      	ldrh	r3, [r4, #12]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:238
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  54:	bf08      	it	eq
  56:	9804      	ldreq	r0, [sp, #16]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:246
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
  58:	b21b      	sxth	r3, r3
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:242
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  5a:	bf18      	it	ne
  5c:	9803      	ldrne	r0, [sp, #12]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:246
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
  5e:	2b00      	cmp	r3, #0
  60:	da03      	bge.n	6a <RCC_GetClocksFreq+0x6a>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:249
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  62:	2319      	movs	r3, #25
  64:	4343      	muls	r3, r0
  66:	004a      	lsls	r2, r1, #1
  68:	e002      	b.n	70 <RCC_GetClocksFreq+0x70>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:254
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  6a:	2319      	movs	r3, #25
  6c:	4343      	muls	r3, r0
  6e:	008a      	lsls	r2, r1, #2
  70:	fbb3 f1f2 	udiv	r1, r3, r2
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:256
  }
  tmpreg = (integerdivider / 100) << 4;
  74:	2064      	movs	r0, #100
  76:	fbb1 f3f0 	udiv	r3, r1, r0
  7a:	011a      	lsls	r2, r3, #4
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:259

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
  7c:	0913      	lsrs	r3, r2, #4
  7e:	fb00 1113 	mls	r1, r0, r3, r1
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:262

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
  82:	89a3      	ldrh	r3, [r4, #12]
  84:	b21b      	sxth	r3, r3
  86:	2b00      	cmp	r3, #0
  88:	da06      	bge.n	98 <RCC_GetClocksFreq+0x98>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:264
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  8a:	00cb      	lsls	r3, r1, #3
  8c:	3332      	adds	r3, #50
  8e:	fbb3 f3f0 	udiv	r3, r3, r0
  92:	f003 0307 	and.w	r3, r3, #7	; 0x7
  96:	e005      	b.n	a4 <RCC_GetClocksFreq+0xa4>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:268
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  98:	010b      	lsls	r3, r1, #4
  9a:	3332      	adds	r3, #50
  9c:	fbb3 f3f0 	udiv	r3, r3, r0
  a0:	f003 030f 	and.w	r3, r3, #15	; 0xf
  a4:	ea43 0102 	orr.w	r1, r3, r2
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:272
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
  a8:	b28b      	uxth	r3, r1
  aa:	8123      	strh	r3, [r4, #8]
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:273
}
  ac:	b007      	add	sp, #28
  ae:	bd30      	pop	{r4, r5, pc}
  b0:	40013800 	.word	0x40013800
Disassembly of section .text.USART_DeInit:

00000000 <USART_DeInit>:
USART_DeInit():
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:131
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
   0:	4b1e      	ldr	r3, [pc, #120]	(7c <USART_DeInit+0x7c>)
   2:	b510      	push	{r4, lr}
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:135
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
   4:	4298      	cmp	r0, r3
   6:	d10a      	bne.n	1e <USART_DeInit+0x1e>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:137
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
   8:	2101      	movs	r1, #1
   a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   e:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:138
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  12:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  16:	2100      	movs	r1, #0
  18:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
  1c:	e02d      	b.n	7a <USART_DeInit+0x7a>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:140
  }
  else if (USARTx == USART2)
  1e:	4b18      	ldr	r3, [pc, #96]	(80 <USART_DeInit+0x80>)
  20:	4298      	cmp	r0, r3
  22:	d107      	bne.n	34 <USART_DeInit+0x34>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:142
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  24:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  28:	2101      	movs	r1, #1
  2a:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:143
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  2e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  32:	e01f      	b.n	74 <USART_DeInit+0x74>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:145
  }
  else if (USARTx == USART3)
  34:	4b13      	ldr	r3, [pc, #76]	(84 <USART_DeInit+0x84>)
  36:	4298      	cmp	r0, r3
  38:	d107      	bne.n	4a <USART_DeInit+0x4a>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:147
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
  3a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  3e:	2101      	movs	r1, #1
  40:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:148
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  44:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  48:	e014      	b.n	74 <USART_DeInit+0x74>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:150
  }    
  else if (USARTx == UART4)
  4a:	4b0f      	ldr	r3, [pc, #60]	(88 <USART_DeInit+0x88>)
  4c:	4298      	cmp	r0, r3
  4e:	d107      	bne.n	60 <USART_DeInit+0x60>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:152
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
  50:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  54:	2101      	movs	r1, #1
  56:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:153
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  5a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  5e:	e009      	b.n	74 <USART_DeInit+0x74>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:157
  }    
  else
  {
    if (USARTx == UART5)
  60:	4b0a      	ldr	r3, [pc, #40]	(8c <USART_DeInit+0x8c>)
  62:	4298      	cmp	r0, r3
  64:	d109      	bne.n	7a <USART_DeInit+0x7a>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:159
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
  66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  6a:	2101      	movs	r1, #1
  6c:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:160
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  70:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  74:	2100      	movs	r1, #0
  76:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Linux\Downloads\06_12\en.stsw-stm32054\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:163
    }
  }
}
  7a:	bd10      	pop	{r4, pc}
  7c:	40013800 	.word	0x40013800
  80:	40004400 	.word	0x40004400
  84:	40004800 	.word	0x40004800
  88:	40004c00 	.word	0x40004c00
  8c:	40005000 	.word	0x40005000
